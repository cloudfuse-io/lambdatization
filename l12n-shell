#!/usr/bin/env bash

# This scripts runs bash on the CLI container.
# - if no argument is provided, opens an interactive shell in the container
# - arguments are passed to bash, e.g run `./l12n -c 'ls'` to run that command
#   on the container

# Environment:
# - L12N_BUILD: set the path of the lambdatization repo to build the image
# - L12N_TRACE: more verbose error messages when something unexpected happens

# The CLI runs Docker commands from Docker, so it needs to have access to the
# Docker socket. The calling user id and group id as well as the docker group id
# are propagated to the image at build time. This enables the image to be runned
# using the host user, but a rebuild is required when changing the calling user.

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
# Take the provided credentials file location into account
AWS_SHARED_CREDENTIALS_FILE="${AWS_SHARED_CREDENTIALS_FILE:=$HOME/.aws/credentials}"
AWS_CONFIG_FILE="${AWS_CONFIG_FILE:=$HOME/.aws/config}"
# Allow binding from host to run l12n-shell within l12n-shell
CURRENT_DIRNAME=$(pwd)
export HOST_DIRNAME="${HOST_DIRNAME:=$CURRENT_DIRNAME}"
export HOST_CREDENTIALS_FILE="${HOST_CREDENTIALS_FILE:=$AWS_SHARED_CREDENTIALS_FILE}"
export HOST_AWS_CONFIG_FILE="${HOST_AWS_CONFIG_FILE:=$AWS_CONFIG_FILE}"
export HOST_DOCKER_SOCKET="${HOST_DOCKER_SOCKET:=/var/run/docker.sock}"

export CALLER_UID=$(id -u)
export CALLER_GID=$(id -g)
export DOCKER_SOCKET_GID=$(stat -c '%g' ${HOST_DOCKER_SOCKET})

build () {
  docker build \
    -t cloudfuse-io/lambdatization:cli \
    $SCRIPT_DIR/cli/docker \
  1>&2 \
  || exit $? # call exit to fail CLI if build fails
}

docker image inspect cloudfuse-io/lambdatization:cli > /dev/null
if [ $? -ne 0 ] && [[ -z $L12N_BUILD ]]
  then
    echo "Run this script with the environment variable L12N_BUILD=1 to build the CLI image"
    exit 1
fi

if [[ ! -z $L12N_BUILD ]] && [[ ! -f $SCRIPT_DIR/cli/docker/Dockerfile ]] 
  then
    echo "The script does not seem to be located in a valid L12N repository directory"
    exit 1
fi

# only build if explicitely required
[[ -z $L12N_BUILD ]] || build

# Run image with both AWS credentials file and env credentials if available
# First argument passed to docker as flags
# Second argument passed to the container as command arguments
run () {
  docker run \
    $(echo "$1") \
    --mount type=bind,source=$HOST_DOCKER_SOCKET,target=/var/run/docker.sock \
    --mount type=bind,source=/,target=/mnt/host \
    --mount source=l12n-cli-persistent-configs,target=/etc/persistent-configs \
    --env-file <(cat .env 2>/dev/null && true) \
    -e AWS_PROFILE \
    $([[ -f "$AWS_SHARED_CREDENTIALS_FILE" ]] && echo "-e AWS_SHARED_CREDENTIALS_FILE=/host$HOST_CREDENTIALS_FILE") \
    $([[ -f "$AWS_CONFIG_FILE" ]] && echo "-e AWS_CONFIG_FILE=/host$HOST_AWS_CONFIG_FILE") \
    -e AWS_ACCESS_KEY_ID \
    -e AWS_SECRET_ACCESS_KEY \
    --env-file <(env | grep L12N_) \
    --env-file <(env | grep HOST_) \
    -e HOST_UID=$CALLER_UID \
    -e HOST_GID=$CALLER_GID \
    -e HOST_DOCKER_GID=$DOCKER_SOCKET_GID \
    -e REPO_DIR=/host$SCRIPT_DIR \
    --hostname=lambdatization \
    --rm \
    --privileged \
    cloudfuse-io/lambdatization:cli $HOST_DIRNAME "${@:2}"
}

# if no argument is provided and no data is piped in, add the tty flag
tty_flag=$([[ $# -eq 0 ]] && [ -t 0 ] && echo '-t')
# run bash in the container with the provided arguments
run "-i $tty_flag" "$@"
